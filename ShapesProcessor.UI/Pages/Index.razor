@page "/"

@using ShapesProcessor.UI.Services
@using ShapesProcessor.UI.Shapes

@inject IJSRuntime JS;
@inject IForegroundShapesService ShapesService


<h4>Canvas size - 1500:500</h4>

<canvas id="canvasbox" class="border" width="@_width" height="@_height"></canvas>

 <div class="container" style="margin-left: 0px; margin-right: 0px">
   <div class="row">
        <div class="border col">
            <h4>Draw triangle!</h4>

            <div class="container">
                <div class="row">
                    <label class="col"  for="fp">First point:</label>
                    <input class="col-sm" type="number" id="fp" name="fp" @bind="_triangle.A_x"><br><br>
                    <input class="col-sm" type="number" id="fp" name="fp" @bind="_triangle.A_y"><br><br>
                </div>
            </div>

            <div class="container">
                <div class="row">
                    <label class="col" for="sp">Second Point:</label>
                    <input  class="col-sm" type="number" id="sp" name="sp"  @bind="_triangle.B_x"><br><br>
                    <input  class="col-sm" type="number" id="sp" name="sp"  @bind="_triangle.B_y"><br><br>
                </div>
            </div>

                <div class="container">
                <div class="row">
                    <label class="col"  for="tp">Third point:</label>
                    <input  class="col-sm" type="number" id="tp" name="tp"  @bind="_triangle.C_x"><br><br>
                    <input  class="col-sm" type="number" id="tp" name="tp"  @bind="_triangle.C_y"><br><br>
                </div>
            </div>

             <div class="container">
                <div class="row">
                    <button class="btn btn-primary" style="margin:1%" @onclick="@(() => DrawTriangle(_triangle))">Create Triangle</button>
                </div>
            </div>
        </div>

        <div class="border col">
            <h4>Draw Rectangle!</h4>

            <div class="container">
                <div class="row">
                    <label class="col"  for="fp">First point:</label>
                    <input class="col-sm" type="number" id="fp" name="fp" @bind="_rectangle.A_x"><br><br>
                    <input class="col-sm" type="number" id="fp" name="fp" @bind="_rectangle.A_y"><br><br>
                </div>
            </div>

            <div class="container">
                <div class="row">
                    <label class="col" for="sp">Second Point:</label>
                    <input  class="col-sm" type="number" id="sp" name="sp"  @bind="_rectangle.B_x"><br><br>
                    <input  class="col-sm" type="number" id="sp" name="sp"  @bind="_rectangle.B_y"><br><br>
                </div>
            </div>

            <div class="container">
                <div class="row">
                    <label class="col"  for="tp">Third point:</label>
                    <input  class="col-sm" type="number" id="tp" name="tp"  @bind="_rectangle.C_x"><br><br>
                    <input  class="col-sm" type="number" id="tp" name="tp"  @bind="_rectangle.C_y"><br><br>
                </div>
            </div>

            <div class="container">
                <div class="row">
                    <label class="col"  for="tp">Fourth point:</label>
                    <input  class="col-sm" type="number" id="tp" name="tp"  @bind="_rectangle.D_x"><br><br>
                    <input  class="col-sm" type="number" id="tp" name="tp"  @bind="_rectangle.D_y"><br><br>
                </div>
            </div>
            <div class="container">
                <div class="row">
                    <button class="btn btn-primary"  style="margin:1%" @onclick="@(() => DrawRectangle(_rectangle))">Create Rectangle</button>
                </div>
            </div>
       </div>

       <div class="border col">
            <h4>Draw circle!</h4>

            <div class="container">
                <div class="row">
                    <label class="col-sm"  for="fp">Center:</label>
                    <input class="col-sm" type="number" id="fp" name="fp" @bind="_circle.X"><br><br>
                    <input class="col-sm" type="number" id="fp" name="fp" @bind="_circle.Y"><br><br>
                </div>
            </div>

            <div class="container">
                <div class="row">
                    <label class="col-sm" for="sp">Radius:</label>
                    <input  class="col-sm" type="number" id="sp" name="sp"  @bind="_circle.Radius"><br><br>
                </div>
            </div>
            <div class="container">
               <div class="row">
                    <button class="btn btn-primary"  style="margin:1%" @onclick="@(() => DrawCircle(_circle))">Create Circle</button>
                </div>
            </div>
        </div>
   </div>
</div>

<button class="btn btn-danger" @onclick="Clear">Clear</button>
<button class="btn btn-danger" @onclick="DrawRandom">Draw Random</button>
<button class="btn btn-primary" @onclick="GetForegrounds">Get Foregrounds</button>


@code 
{
    private int _width = 1500;
    private int _height = 500;

    private Triangle _triangle = new();
    private Rectangle _rectangle = new();
    private Circle _circle = new();

    private List<IShape> _shapes = new();

    private async Task DrawTriangle(Triangle triangle)
    {
        await JS.InvokeAsync<string>("drawTriangle", new string[] 
        { 
            _triangle.A_x.ToString(), _triangle.A_y.ToString(), 
            _triangle.B_x.ToString(), _triangle.B_y.ToString(), 
            _triangle.C_x.ToString(), _triangle.C_y.ToString() 
        });

        _shapes.Add(_triangle);
        _triangle = new();
    }

    private async Task DrawRectangle(Rectangle rectangle)
    {
        await JS.InvokeAsync<string>("drawRectangle", new string[] 
        {
            _rectangle.A_x.ToString(), _rectangle.A_y.ToString(), 
            _rectangle.B_x.ToString(), _rectangle.B_y.ToString(), 
            _rectangle.C_x.ToString(), _rectangle.C_y.ToString(),
            _rectangle.D_x.ToString(), _rectangle.D_y.ToString()
        });
        _shapes.Add(_rectangle);
        _rectangle = new();
    }

    private async Task DrawCircle(Circle circle)
    {
        await JS.InvokeAsync<string>("drawCircle", new string[] 
        {
            _circle.X.ToString(),
            _circle.Y.ToString(),
            _circle.Radius.ToString()
        });
        _shapes.Add(_circle);
        _rectangle = new();
    }

    private async Task Clear()
    {
        _shapes = new();
        _rectangle = new();
        _triangle = new();
        _circle = new();
        await JS.InvokeVoidAsync("clearCanvas");
    }

    /// <summary>
    /// Get foreground shapes from UI shapes array
    /// </summary>
    /// <returns></returns>
    private async Task GetForegrounds()
    {
        await JS.InvokeVoidAsync("clearCanvas");
        var foregroundShapes = ShapesService.GetForegrounds(_shapes);

        await DrawShapes(foregroundShapes);
    }

    /// <summary>
    /// TODO: Create randomize servise, remove this from UI
    /// </summary>
    /// <returns></returns>
    private async Task DrawRandom()
    {
        await Clear();

        Random random = new Random();
        List<IShape> randomShapes = new();

        foreach(var shape in Enumerable.Range(0, 15))
        {
            int rectangleWidth = random.Next(0, 200);
            int rectangleHeight = random.Next(0, 200);
            int rectangleSpawnX = random.Next(0, _width);
            int rectangleSpawnY = random.Next(0, _width);

            int triangleSpawnX = random.Next(0, _width);
            int triangleSpawnY = random.Next(0, _width);
            int triangleWidth = random.Next(triangleSpawnX, triangleSpawnX + 200);
            int triangleHeight = random.Next(0, 200);
            int triangleBaseY = triangleSpawnY - triangleHeight;

            int choose = random.Next(1, 4);
            if(choose == 1)
            {
                randomShapes.Add(new Rectangle()
                {
                    A_x = rectangleSpawnX,
                    A_y = rectangleSpawnY,
                    B_x = rectangleSpawnX + rectangleWidth,
                    B_y = rectangleSpawnY,
                    C_x = rectangleSpawnX + rectangleWidth,
                    C_y = rectangleSpawnY + rectangleHeight,
                    D_x = rectangleSpawnX,
                    D_y = rectangleSpawnY + rectangleHeight,
                });
            }
            else if(choose == 2)
            {
                randomShapes.Add(new Circle()
                {
                    Radius = random.Next(0, 100),
                    X = random.Next(0, _width),
                    Y = random.Next(0, _height),
                });
            }
            else if(choose == 3)
            {
                randomShapes.Add(new Triangle()
                {
                    A_x = triangleSpawnX,
                    A_y = triangleSpawnY,
                    B_x = triangleSpawnX + triangleHeight,
                    B_y = triangleBaseY,
                    C_x = triangleSpawnX - triangleHeight,
                    C_y = triangleBaseY,
                });
            }
        }

        await DrawShapes(randomShapes);
    }

    private async Task DrawShapes(List<IShape> shapes)
    {
        foreach(var shape in shapes)
        {
            if(shape.Type == ShapeType.Triangle)
            {
                _triangle = (Triangle)shape;
                await DrawTriangle(_triangle);
            }
            if(shape.Type == ShapeType.Circle)
            {
                _circle = (Circle)shape;
                await DrawCircle(_circle);
            }
            if(shape.Type == ShapeType.Rectangle)
            {
                _rectangle = (Rectangle)shape;
                await DrawRectangle(_rectangle);
            }
        }
    }
}